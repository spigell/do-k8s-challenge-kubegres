// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Kubegres is the Schema for the kubegres API
type Kubegres struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       KubegresSpecPtrOutput      `pulumi:"spec"`
	Status     KubegresStatusPtrOutput    `pulumi:"status"`
}

// NewKubegres registers a new resource with the given unique name, arguments, and options.
func NewKubegres(ctx *pulumi.Context,
	name string, args *KubegresArgs, opts ...pulumi.ResourceOption) (*Kubegres, error) {
	if args == nil {
		args = &KubegresArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kubegres.reactive-tech.io/v1")
	args.Kind = pulumi.StringPtr("Kubegres")
	var resource Kubegres
	err := ctx.RegisterResource("kubernetes:kubegres.reactive-tech.io/v1:Kubegres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubegres gets an existing Kubegres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubegres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubegresState, opts ...pulumi.ResourceOption) (*Kubegres, error) {
	var resource Kubegres
	err := ctx.ReadResource("kubernetes:kubegres.reactive-tech.io/v1:Kubegres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kubegres resources.
type kubegresState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *KubegresSpec      `pulumi:"spec"`
	Status     *KubegresStatus    `pulumi:"status"`
}

type KubegresState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       KubegresSpecPtrInput
	Status     KubegresStatusPtrInput
}

func (KubegresState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubegresState)(nil)).Elem()
}

type kubegresArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *KubegresSpec      `pulumi:"spec"`
	Status     *KubegresStatus    `pulumi:"status"`
}

// The set of arguments for constructing a Kubegres resource.
type KubegresArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       KubegresSpecPtrInput
	Status     KubegresStatusPtrInput
}

func (KubegresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubegresArgs)(nil)).Elem()
}

type KubegresInput interface {
	pulumi.Input

	ToKubegresOutput() KubegresOutput
	ToKubegresOutputWithContext(ctx context.Context) KubegresOutput
}

func (*Kubegres) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubegres)(nil))
}

func (i *Kubegres) ToKubegresOutput() KubegresOutput {
	return i.ToKubegresOutputWithContext(context.Background())
}

func (i *Kubegres) ToKubegresOutputWithContext(ctx context.Context) KubegresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubegresOutput)
}

type KubegresOutput struct {
	*pulumi.OutputState
}

func (KubegresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubegres)(nil))
}

func (o KubegresOutput) ToKubegresOutput() KubegresOutput {
	return o
}

func (o KubegresOutput) ToKubegresOutputWithContext(ctx context.Context) KubegresOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KubegresOutput{})
}
